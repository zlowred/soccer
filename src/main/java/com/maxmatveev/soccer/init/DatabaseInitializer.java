package com.maxmatveev.soccer.init;

import com.google.common.collect.Maps;
import com.maxmatveev.soccer.service.DataLoader;
import com.maxmatveev.soccer.service.DataLoaderException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.BeansException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationContextAware;
import org.springframework.core.io.Resource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcOperations;
import org.springframework.stereotype.Component;

import javax.annotation.PostConstruct;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.HashMap;

/**
 * Created by Max Matveev on 09/06/15.
 */
@Component
public class DatabaseInitializer implements ApplicationContextAware {
    public static final String DEFAULT_DATA_RESOURCE = "classpath:com/maxmatveev/soccer/data.csv";
    public static final String DROP_LEAGUES_TABLE_SQL = "drop table Leagues if exists";
    public static final String CREATE_LEAGUES_TABLE_SQL = "create table Leagues (" +
            "id integer generated by default as identity not null primary key," +
            "name varchar(1000) not null," +
            "constraint unique_league_name unique(name))";
    public static final String DROP_TEAMS_TABLE_SQL = "drop table Teams if exists";
    public static final String CREATE_TEAMS_TABLE_SQL = "create table Teams (" +
            "id integer generated by default as identity not null primary key," +
            "name varchar(1000) not null," +
            "league_id integer not null," +
            "constraint unique_team_name unique(name)," +
            "constraint fk_league foreign key (league_id) references Leagues (id))";
    public static final String DROP_PLAYERS_TABLE_SQL = "drop table Players if exists";
    public static final String CREATE_PLAYERS_TABLE_SQL = "create table Players (" +
            "id integer generated by default as identity not null primary key," +
            "full_name varchar(1000) not null," +
            "number integer not null," +
            "position char(1) not null," +
            "team_id integer not null," +
            "constraint fk_team foreign key (team_id) references Teams (id))";
    private static final Logger LOG = LoggerFactory.getLogger(DatabaseInitializer.class);
    private ApplicationContext applicationContext;
    private NamedParameterJdbcOperations jdbc;
    private DataLoader csvDataLoader;

    @Autowired
    public void setJdbc(NamedParameterJdbcOperations jdbc) {
        this.jdbc = jdbc;
    }

    @Autowired
    public void setCsvDataLoader(DataLoader csvDataLoader) {
        this.csvDataLoader = csvDataLoader;
    }

    @PostConstruct
    protected void init() {
        boolean tablesExist = jdbc.queryForObject("select COUNT(*) from INFORMATION_SCHEMA.SYSTEM_TABLES Where TABLE_NAME in ('Teams', 'Players', 'Leagues')", new HashMap<String, Object>(), Integer.class) == 3;
        if (tablesExist) {
            LOG.info("Tables already exist; skipping initialization");
        } else {
            LOG.info("Initializing database structure");
            jdbc.update(DROP_LEAGUES_TABLE_SQL, Maps.<String, Object>newHashMap());
            jdbc.update(CREATE_LEAGUES_TABLE_SQL, Maps.<String, Object>newHashMap());
            jdbc.update(DROP_TEAMS_TABLE_SQL, Maps.<String, Object>newHashMap());
            jdbc.update(CREATE_TEAMS_TABLE_SQL, Maps.<String, Object>newHashMap());
            jdbc.update(DROP_PLAYERS_TABLE_SQL, Maps.<String, Object>newHashMap());
            jdbc.update(CREATE_PLAYERS_TABLE_SQL, Maps.<String, Object>newHashMap());
            LOG.info("Loading initial data set");
            Resource defaultData = applicationContext.getResource(DEFAULT_DATA_RESOURCE);
            try (BufferedReader reader = new BufferedReader(
                    new InputStreamReader(defaultData.getInputStream()))) {
                csvDataLoader.loadData(reader);
                LOG.info("Database initialized");
            } catch (DataLoaderException | IOException e) {
                LOG.error("Error importing default data set; initial data is invalid", e);
                throw new IllegalStateException("Failed to initialize database", e);
            }
        }
    }

    @Override
    public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {
        this.applicationContext = applicationContext;
    }
}
